@page "/Cars/CarMasterListView"
@rendermode InteractiveServer

@using BigIronRail.Blazor.BusinessObjects
@using BigIronRail.Blazor.Data.Repository
@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.LoadingIndicator

@inject UserState UserState
@inject IRepository Repository
@inject NavigationManager Navigation
@inject LoadCurrentUser LoadCurrentUser

<h1>Railcar Management</h1>

<style>
/* TODO: move to CarMasterListView.razor.css */
.grid-box{border:1px solid #000;background:#f5f5f5;border-radius:4px;padding:.5rem}
.toolbar{display:flex;align-items:center;gap:.5rem;margin-bottom:.5rem}
.w-auto{width:auto}
.highlight-dropdown{background:#fffacd}
.btn-remove{transition:background-color .15s ease,color .15s ease,border-color .15s ease}
.btn-remove:hover{background:#dc3545;color:#fff!important;border-color:#dc3545}
</style>

<!-- Delete confirmation -->
<Modal @bind-Visible="ShowDeleteModal" Backdrop="Backdrop.True">
    <ModalContent>
        <ModalHeader>@DeleteTitle</ModalHeader>
        <ModalBody style="white-space: pre-line;">@DeleteMessage</ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Type="ButtonType.Button" Clicked="ConfirmDelete">Yes, Delete</Button>
            <Button Color="Color.Secondary" Type="ButtonType.Button" Clicked="@(() => ShowDeleteModal = false)">No</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Info / toggle-active confirm -->
<Modal @bind-Visible="ShowInfoModal" Backdrop="Backdrop.True">
    <ModalContent>
        <ModalHeader>@InfoTitle</ModalHeader>
        <ModalBody>@InfoMessage</ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" @onclick="ConfirmToggleActive">Yes</Button>
            <Button Color="Color.Secondary" @onclick="CancelToggleActive">No</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@if (Cars is null)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <div class="mt-3 d-flex gap-2">
        @if (Cars.Any(c => c.IsSelected))
        {
            <Button Color="Color.Danger" Type="ButtonType.Button" Clicked="AskToggleActiveConfirmation">Toggle Active</Button>
        }
        else
        {
            <Button Class="btn-slate" Type="ButtonType.Button" Clicked="AddNewCar">Add New Car</Button>
        }
    </div>

    <div class="grid-box mt-2">
        <div class="toolbar">
            <div class="ms-auto d-flex align-items-center gap-2">
                <label for="carPageSize" class="form-label m-0">Rows per page:</label>
                <select id="carPageSize" class="form-select form-select-sm w-auto highlight-dropdown" @bind="carPageSize">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="-1">All</option>
                </select>
            </div>
        </div>

        <LoadingIndicator @bind-Visible="@IsLoading" Color="Color.Danger">
            <DataGrid TItem="CarMaster"
                      Data="@Cars"
                      ShowPager
                      PagerLocation="PagerLocation.Bottom"
                      Sortable
                      Filterable
                      PageSize="@CarPageSizeEffective">
                <DataGridColumns>

                    <DataGridColumn TItem="CarMaster" Caption="Select" Sortable="false" Filterable="false">
                        <DisplayTemplate Context="car">
                            <input type="checkbox" checked="@car.IsSelected" @onchange="e => ToggleCarSelection(car, e)" />
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn TItem="CarMaster" Field="@nameof(CarMaster.CompanyName)" Caption="Company Name" />

                    <DataGridColumn TItem="CarMaster" Field="@nameof(CarMaster.CarName)" Caption="Car Name">
                        <DisplayTemplate Context="c">
                            @FormatCarName(c.CarName)
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn TItem="CarMaster" Caption="Active" Sortable="false" Filterable="false">
                        <DisplayTemplate Context="car">
                            <div style="background-color:@(car.IsActive ? "#d4edda" : "#f8d7da");padding:5px;border-radius:4px">
                                @(car.IsActive ? "Active" : "Inactive")
                            </div>
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridDateColumn TItem="CarMaster"
                                        Field="@nameof(CarMaster.DateBeginRecording)"
                                        Caption="Begin Sighting"
                                        Sortable Filterable
                                        DisplayFormat="{0:MM/dd/yyyy}" />

                    <DataGridDateColumn TItem="CarMaster"
                                        Field="@nameof(CarMaster.DateEndRecording)"
                                        Caption="End Sighting"
                                        Sortable Filterable
                                        DisplayFormat="{0:MM/dd/yyyy}" />

                    <DataGridColumn TItem="CarMaster" Caption="Actions" Sortable="false" Filterable="false">
                        <DisplayTemplate Context="car">
                            <Button Class="btn-slate btn-sm me-2" Type="ButtonType.Button" Clicked="@(() => EditCar(car.CarMasterId))">
                                Edit
                            </Button>
                            <Button Class="btn-slate btn-sm btn-remove" Title="Delete" Type="ButtonType.Button" Clicked="@(() => AskDeleteConfirmation(car.CarMasterId))">
                                Remove
                            </Button>
                        </DisplayTemplate>
                    </DataGridColumn>

                </DataGridColumns>
            </DataGrid>
        </LoadingIndicator>
    </div>
}

@code {
    // ---------- State ----------
    private List<CarMaster> Cars { get; set; } = new();
    private CompanyMaster Company { get; set; } = new();
    private string? ErrorMessage { get; set; }
    public bool IsLoading { get; set; }

    private int carPageSize = 10;
    private int CarPageSizeEffective => carPageSize == -1 ? Math.Max(Cars.Count, 1) : carPageSize;

    private List<CarMaster> _selectedCars = new();

    // Delete modal
    private bool ShowDeleteModal;
    private int CarIdPendingDelete;
    private string DeleteTitle = "Confirm Delete";
    private string DeleteMessage =
        "Do you want to delete all Departments and Orders (and their Products) associated with this car?" +
        Environment.NewLine +
        "If unsure, simply select the car and use Toggle Active.";

    // Info/toggle modal
    private bool ShowInfoModal;
    private string InfoTitle = "Notice";
    private string InfoMessage = "";

    // ---------- Lifecycle ----------
    protected override async Task OnInitializedAsync()
    {
        if (UserState.UserMasterId == 0)
            await LoadCurrentUser.RehydrateUser();

        if (UserState.UserMasterId == 0)
        {
            Navigation.NavigateTo("Account/Login");
            return;
        }

        await LoadCarsAsync();
    }

    // ---------- Data ----------
    private async Task LoadCarsAsync()
    {
        try
        {
            IsLoading = true;

            if (UserState.AccountType == AccountTypes.ME)
            {
                Cars = await Repository.GetAllCarMastersAsync();

                // Pull company names for each car (simple loop; consider optimizing if needed)
                foreach (var car in Cars)
                {
                    Company = await Repository.GetCompanyByIdAsync(car.CompanyMasterId);
                    car.CompanyName = Company.CompanyName;
                    car.IsSelected = false;
                }
            }
            else
            {
                Company = await Repository.GetCompanyByIdAsync(UserState.CompanyMasterId);
                Cars = await Repository.GetAllCarMastersByCompanyIdAsync(UserState.CompanyMasterId);
                foreach (var car in Cars)
                {
                    car.CompanyName = Company.CompanyName;
                    car.IsSelected = false;
                }
            }

            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading Car Masters: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    // ---------- Events / Actions ----------
    private void ToggleCarSelection(CarMaster car, ChangeEventArgs e)
        => car.IsSelected = (bool)(e.Value ?? false);

    private async Task EditCar(int carMasterId)
    {
        if (carMasterId <= 0)
        {
            ErrorMessage = "Car not found.";
            return;
        }

        if (UserState.UserMasterId == 0)
            await LoadCurrentUser.RehydrateUser();

        Navigation.NavigateTo($"/Cars/EditCarMaster/{carMasterId}", forceLoad: true);
    }

    private void AskToggleActiveConfirmation()
    {
        _selectedCars = Cars.Where(c => c.IsSelected).ToList();

        if (!_selectedCars.Any())
        {
            InfoTitle = "Alert";
            InfoMessage = "Please select at least one car to change status.";
            ShowInfoModal = true;
            return;
        }

        InfoTitle = "Confirm Active Status Change";
        InfoMessage = "Are you sure you want to toggle active status for the selected railcar(s)?";
        ShowInfoModal = true;
        ShowDeleteModal = false;
    }

    private async Task ConfirmToggleActive()
    {
        try
        {
            foreach (var car in _selectedCars)
                await Repository.ToggleActiveCarMaster(car.CarMasterId);

            await LoadCarsAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error toggling active status: {ex.Message}";
        }
        finally
        {
            ShowInfoModal = false;
            ShowDeleteModal = false;
        }
    }

    private void CancelToggleActive()
    {
        ShowInfoModal = false;
        ShowDeleteModal = false;
    }

    private void AskDeleteConfirmation(int carMasterId)
    {
        CarIdPendingDelete = carMasterId;
        DeleteTitle = "Confirm Delete";
        DeleteMessage = "Do you want to delete all Departments and Orders (and their Products) associated with this car?";
        ShowDeleteModal = true;
    }

    private async Task ConfirmDelete()
    {
        ShowDeleteModal = false;

        try
        {
            var ok = await Repository.DeleteCarCascadeAsync(CarIdPendingDelete, deleteDepartmentsToo: true);
            if (!ok)
            {
                InfoTitle = "Delete Failed";
                InfoMessage = "The car could not be deleted. It may have related records preventing deletion.";
                ShowInfoModal = true;
            }
            else
            {
                await LoadCarsAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting car: {ex.Message}";
        }
    }

    private async Task AddNewCar()
    {
        if (UserState.UserMasterId == 0)
            await LoadCurrentUser.RehydrateUser();

        Navigation.NavigateTo($"/Cars/AddCarMaster/{UserState.CompanyMasterId}");
        await Task.CompletedTask;
    }

    // ---------- UI Helpers ----------
    private static string FormatCarName(string? raw)
    {
        if (string.IsNullOrWhiteSpace(raw)) return string.Empty;

        // Insert a space between leading letters and trailing digits (e.g., ABC123 -> ABC 123)
        int i = 0;
        while (i < raw.Length && char.IsLetter(raw[i])) i++;
        return (i > 0 && i < raw.Length) ? raw.Insert(i, " ") : raw;
    }
}
